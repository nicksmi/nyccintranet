<?php


function nycc_group_import_cron() {
  nycc_group_import_run();
}


function nycc_group_import_run()
{
    $results = array('groupsfound' => 0, 'groupscreated' => 0, 'groupsexisted' => 0, 'usersingroups' => 0);

    //CREATE GROUPS --------------------------------------------------------------------------
    $importgroups = db_query('SELECT DISTINCT nycc_group_identifier, nycc_group_name
    FROM {nycc_groups} nyg');

    $results['groupsfound'] = $importgroups->rowCount();

    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($importgroups as $record) {

      //grab the id
      $currentGrpId = $record->nycc_group_identifier;

      // Perform operations on $record->title, etc. here.
      $queryCheckGroupExists = new EntityFieldQuery();
      $group = $queryCheckGroupExists
        ->entityCondition('entity_type', 'node')
        ->fieldCondition('field_nycc_group_identifier', 'value', $currentGrpId, '=')
        ->addMetaData('account', user_load(1)) // Run the query as user 1.
        ->execute();

        if(empty($group))
        {
            // Create an Entity
            $node = entity_create('node', array('type' => 'intranet_group'));
            // Specify the author
            $node->uid = 1;
            // Create a Entity Wrapper of that new Entity
            $entity = entity_metadata_wrapper('node', $node);

            $entity->title = $record->nycc_group_name;

            $entity->field_nycc_group_identifier = $currentGrpId;

            $entity->group_access = true;

            // Save the node.
            $entity->save();

            $results['groupscreated'] = $results['groupscreated'] + 1;

            $group = $queryCheckGroupExists
              ->entityCondition('entity_type', 'node')
              ->fieldCondition('field_nycc_group_identifier', 'value', $currentGrpId, '=')
              ->addMetaData('account', user_load(1)) // Run the query as user 1.
              ->execute();
        }


        $currentGids = array_keys($group['node']);
        $currentGid = $currentGids[0];
        //get all memberships
        $queryMembers = new EntityFieldQuery();
        $resultMembers = $queryMembers
          ->entityCondition('entity_type', 'og_membership')
          ->propertyCondition('group_type', 'user', '=')
          ->propertyCondition('gid', $currentGid, '=')
          ->addMetaData('account', user_load(1))// Run the query as user 1.
          ->execute();


        //IMPORT USERS INTO GROUPS------------------------------------------------------------------
        $importusers = db_query('SELECT DISTINCT nycc_group_identifier, nycc_employee_number
        FROM {nycc_users_in_groups} nyuig WHERE nycc_group_identifier = '.$currentGrpId);

        //Double check there are people in the group & any if current memberships exist
        if(($importusers->rowCount() > 0) && (!empty($resultMembers['og_membership'])))
        {
            //clear all memberships for a fresh import
            og_membership_delete_multiple(array_keys($resultMembers['og_membership']));            
        }


        foreach ($importusers as $record) {

           //grab the user entity
           $getUserEntity = new EntityFieldQuery();
           $currentUserEntity = $getUserEntity
          ->entityCondition('entity_type', 'user')
          ->fieldCondition('field_employee_number', 'value', $record->nycc_employee_number, '=')
          ->addMetaData('account', user_load(1)) // Run the query as user 1.
          ->execute();

          // Load the user we want to add to the group
          if(!empty($currentUserEntity))
          {
            $currentUsersUids = array_keys($currentUserEntity['user']);
            $currentUserUid = $currentUsersUids[0];

            $currentUserAccount = user_load($currentUserUid);

            if(!empty($currentUserAccount) && $currentGid != 0)
            {
              //drupal_set_message('currentgid '. $currentGid);
              //drupal_set_message('currentuid '. $currentUserUid);
                  // Add the user to the group
                  og_group('node', $currentGid, array(
                      "entity type"       => "user",
                      "entity"        => $currentUserAccount,
                      "membership type"   => OG_MEMBERSHIP_TYPE_DEFAULT,
                  ));
                  $results['usersingroups'] = $results['usersingroups'] + 1;
            }
          }
        }



    }
    //CREATE GROUPS END--------------------------------------------------------------------------


    variable_set('nycc_group_import_last_run', time());

    $results['groupsexisted'] = $results['groupsfound'] - $results['groupscreated'];

    return $results;
}

  function nycc_group_import_menu(){
    $items = array();

    $items['admin/config/nycc/nyccgroupimport'] = array(
      'title' => 'NYCC Group import',
      'description' => 'Manually trigger a group import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nycc_group_import_form'),
      'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
  }

function nycc_group_import_form($form, &$form_state) {

  $lastRun = variable_get('nycc_group_import_last_run');

  $form['last_run'] = array(
    '#markup' => '<p>The group import was last run at '.date('l jS \of F Y h:i:s A', $lastRun). '.</p><br />'
  );

  $form['submit_button'] = array(
  '#type' => 'submit',
  '#value' => t('Rebuild groups'),
    );
  return $form;
}

function nycc_group_import_form_submit($form, &$form_state) {
  $results = nycc_group_import_run();
  drupal_set_message($results['groupsfound']. ' group(s) found.');
  drupal_set_message($results['groupsexisted']. ' group(s) already existed.');
  drupal_set_message($results['groupscreated']. ' group(s) created.');
  drupal_set_message($results['usersingroups']. ' group membership(s) created.');
}
